@prefix acl: <http://www.w3.org/ns/auth/acl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix klob: <http://knowledgelinks.io/ns/openbadges/> .
@prefix klff: <http://knowledgelinks.io/ns/formfields/> .
@prefix klr: <http://knowledgelinks.io/ns/resources/> .
@prefix kls: <http://knowledgelinks.io/ns/security/> .
@prefix obi: <https://w3id.org/openbadges#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

#------- Explanation of fields and uses -------------------------------------------------
#    klob:jsonObjName     "literal"       -The name to be used in the json return for the object portion i.e. {"jsonObjName": .... }
#    klob:useFor          obi:ClassName   -The classes that use that property  
#    klob:propertyField   <propertyUri>   -Specifies which property to use in the Resource graph (optional)
#    klob:defaultVal      "literal"       -will return the value if the specified klob:propertyField does not exist in the resource (OPTIONAL)
#    klob:jsonValFormat   "literal"       -The type of lookup to be used. Options are:
#                                              "objectValue"        -> This will return the value of the specified property or a default value
#                                              "lookup"             -> Will use the resources object to lookup the value that is specified 
#                                                                      in the klob:lookupReturnField
#                                              "subjectCalc"        -> will calculate a return value based on the resource URI
#                                                                      only available parseType is "afterLastSlash" 
#                                                                      need to use klob:parseType and klob:unionUrl(optional) with this action
#                                              "urlSub"             -> will substitue a value as a url with 
#                                                                           - klob:url             specifies the main url
#																															      				-	klob:urlendfld       specifies with resource field to append to the url
#		   "lookupUrlSub"       -> functions as urlSub but will lookup a property of the specified URI 
#																							                              - klob:propertyField   must be specified
#																							 "lookupProperties"   -> return a json object of the the defined properties.
#																							                         add a klob:propertyField with a blank node for each desired property to return
#																							                         example:   klob:lookupReturnField [
#																							                                                   		       klob:jsonObjName "type";
#																							                                                   		       klob:jsonValFormat "objectValue" ;
#																							                                                   		       klob:defaultVal "hosted"
#																							                                                   		     ] ;
#																							 "multiValArray"      -> will return an array of all values list with with property field specified in
#																							                         klob:propertyField   Example: klob:propertyField obi:tags
#																							                         resource Data = <> obi:tags "home"
#																							                                         <> obi:tags "house"
#																							                                         <> obi:tags "farm"
#																							                         returns -> ["home","house","farm"]
#    klob:parseType  "afterLastSlash"      -is the only available option: used with "subjectCalc"
#    klob:unionUrl   "literal"             -string to be prepended to the the afterLastSlash return of the subject URI
#    klob:url        "literal"             -tring to prepend in a "urlSub" or "lookupUrlSub" call
#	   klob:urlendfld  <propertyUri>         -the fiel value to append to a "urlSub" or "lookupUrlSub" call
#    klob:lookupReturnField   <propUri>    -used with "lookup" call to specify which property field value wil be returned
#    klff:fieldType  "literal"             -string representing the type field to be used in a form. Options are:
#                                              "text", "textbox", "date", "datetime", "select", "password", "email"
#    klff:fieldDefault                     - Default form field value
#    klff:fieldOptions  blanknode          - blank node contains instructions on how to get list of options
#    klff:fieldSecurity blanknode          - blank node contains instructions on who is allowed access to the field/property
#    klff:formLabelName "literal"          - name of the field to be used in the form.
#    klff:formFieldName "literal"         - name of that should be used in html name/id attribute


	
obi:Assertion a rdf:Class;  
	rdfs:comment "Assertion for open badges.";	
	rdfs:label "Open Badge Assertion";
	klob:jsonObjName "Assertion" .
	
obi:context a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Name of the open badge instance.";	
	klob:jsonObjName "@context";
	klob:jsonValFormat "objectValue" ;
	klob:defaultVal "https://w3id.org/openbadges/v1" ;
	klob:propertyField obi:context ;
	klob:useFor obi:BadgeClass ;
	klob:useFor obi:Assertion .

obi:assertionid a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Uuid of the open badge assertion.";	
	klob:jsonObjName "id";
	klob:jsonValFormat "subjectCalc" ;
	klob:parseType "afterLastSlash" ;
	klob:unionUrl "{{ base_url }}/badges/Assertion/";
	klob:useFor obi:Assertion .

obi:assertionImage a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Image URL of the open badge assertion.";	
	klob:jsonObjName "image";
	klob:jsonValFormat "subjectCalc" ;
	klob:parseType "afterLastSlash" ;
	klob:unionUrl "{{ base_url }}/badges/AssertionImage/";
	klob:useFor obi:Assertion .
	
obi:uid a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "uid of the open badge assertion.";	
	klob:jsonObjName "uid";
	klob:jsonValFormat "subjectCalc" ;
	klob:parseType "afterLastSlash" ;
	klob:useFor obi:Assertion .
	
obi:hasBadge a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Badge used for the badge assertion.";	
	klob:jsonObjName "badge";
	klob:jsonValFormat "lookupUrlSub" ;
	klob:propertyField obi:hasBadge ;
	klob:url "{{ base_url }}/badges/BadgeClass/";
	klob:urlendfld schema:alternativeName;
	klob:useFor obi:Assertion .

obi:issuedOn a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Timestamp when badge was issued.";	
	klob:jsonObjName "issuedOn";
	klob:jsonValFormat "objectValue" ;
	klob:propertyField obi:issuedOn ;
	klob:useFor obi:Assertion .

obi:expires a klff:FormProperty;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:literal;
	rdfs:comment "Timestamp when badge expires.";	
	klob:jsonObjName "expires";
	klob:jsonValFormat "objectValue" ;
	klob:propertyField obi:expires ;
	klob:useFor obi:Assertion .
	
obi:recipient a klff:FormProperty;
	rdfs:domain obi:Recipient;
	rdfs:range rdfs:literal;
	rdfs:comment "Recipient of a Badge.";	
	klob:jsonObjName "recipient";
	klob:jsonValFormat "lookupProperties" ;
	klob:lookupReturnField [
		klob:jsonObjName "type";
		klob:jsonValFormat "objectValue" ;
		klob:defaultVal "email";
		klob:propertyField obi:assertionType
	] ;
	klob:lookupReturnField [
		klob:jsonObjName "hashed";
		klob:jsonValFormat "objectValue" ;
		klob:defaultVal true ;
		klob:propertyField obi:hash
	] ;
	klob:lookupReturnField [
		klob:jsonObjName "salt";
		klob:jsonValFormat "objectValue" ;
		klob:defaultVal "secretKey";
		klob:propertyField obi:secretKey
	] ;
	klob:lookupReturnField [
		klob:jsonObjName "identity";
		klob:jsonValFormat "objectValue" ;
		klob:propertyField obi:identity
	] ;
	klob:useFor obi:Assertion .

obi:verify a klff:FormProperty;
	rdfs:domain obi:Recipient;
	rdfs:range rdfs:literal;
	rdfs:comment "Instructions for third parties to verify this assertion.";	
	klob:jsonObjName "verify";
	klob:jsonValFormat "lookupProperties" ;
	klob:lookupReturnField [
		klob:jsonObjName "type";
		klob:jsonValFormat "objectValue" ;
		klob:defaultVal "hosted"
	] ;
	klob:lookupReturnField [
		klob:jsonObjName "url";
		klob:jsonValFormat "subjectCalc" ;
		klob:parseType "afterLastSlash" ;
		klob:unionUrl "{{ base_url }}/badges/Assertion/"
	] ;
	klob:useFor obi:Assertion .
	
obi:name a klff:FormProperty;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	rdfs:Literal;	
	rdfs:comment "Name of the open badge instance.";	
	klob:jsonObjName "name";
	klob:jsonValFormat "objectValue";
	klob:useFor obi:BadgeClass .

obi:description a klff:FormProperty;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	rdfs:Literal;	
	rdfs:comment "Description of the open badge instance.";	
	klob:jsonObjName "description";
	klob:jsonValFormat "objectValue";
	klob:useFor obi:BadgeClass .

obi:issuer a klff:FormProperty;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	schema:Organization;	
	rdfs:label "Issuer";
	rdfs:comment "Issuer of the open badge instance.";	
	klob:jsonObjName "issuer";
	klob:jsonValFormat "lookup";
	klob:lookupReturnField obi:url;
	klob:useFor obi:BadgeClass .

obi:type a klff:FormProperty;	
	rdfs:domain	obi:Resource;	
	rdfs:range	obi:Resource;	
	rdfs:comment "Type of item";	
	klob:jsonObjName "type";
	klob:jsonValFormat "lookup";
	klob:lookupReturnField klob:jsonObjName;
	klob:useFor obi:BadgeClass ;
	klob:useFor obi:Assertion .	

schema:image a klff:FormProperty;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:domain obi:Assertion;
	rdfs:range	schema:ImageObject;	
	rdfs:comment "Image of the item.";	
	klob:jsonObjName "image";
	klob:jsonValFormat "urlSub";
	klob:url "{{ base_url }}/badges/BadgeImage/";
	klob:urlendfld schema:alternativeName;
	klob:useFor obi:BadgeClass .

obi:criteria a klff:FormProperty;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "Criteria for earning the Badge.";	
	klob:jsonObjName "criteria";
	klob:jsonValFormat "urlSub";
	klob:url "{{ base_url }}/badges/BadgeCriteria/";
	klob:urlendfld schema:alternativeName;
	klob:useFor obi:BadgeClass .	

schema:alternativeName a klff:FormProperty;
	rdfs:domain	obi:BadgeClass;
	rdfs:range	xsd:string;
	klff:requiredByDomain obi:BadgeClass.
	
obi:id a klff:FormProperty;	
	rdfs:domain	obi:Resource;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "Issuer of the open badge instance.";	
	klob:jsonObjName "id";
	klob:jsonValFormat "urlSub";
	klob:url "{{ base_url }}/badges/BadgeClass/";
	klob:urlendfld schema:alternativeName;
	klob:useFor obi:BadgeClass .

obi:tags a klff:FormProperty;	
	rdfs:domain	obi:Resource;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "Tags for the badges.";	
	klob:jsonObjName "tags";
	klob:jsonValFormat "multiValArray";
	klob:useFor obi:BadgeClass .	

schema:Person a rdf:Class;
	a klff:objectClass ;
	klff:storageType "object";
	klff:primaryKey schema:email.
	
obi:BadgeClass a rdf:Class;
	a klff:objectClass ;
	klff:storageType "object";
	klff:primaryKey schema:alternativeName;
	rdfs:comment "Class for open badges.";	
	rdfs:label "Open Badge Class";
	klob:jsonObjName "BadgeClass" .
	
kls:UserClass a rdf:Class;
	a klff:objectClass ;
	klff:storageType "object";
	klff:primaryKey kls:hasPerson.
	
kls:PasswordClass a rdf:Class;
	a klff:objectClass;
	klff:storageType "blanknode" .
	
obi:AssertionClass a rdf:Class;
	a klff:objectClass;
	klff:storageType "object";
	klff:primaryKey schema:Person;
	klff:primaryKey obi:BadgeClass .
	
kls:UserGroup a rdf:Class;
	a klff:objectClass;
	klff:storageType "object";
	klff:primaryKey rdfs:label .

klff:FormClass a rdf:Class;
	rdfs:label "Form Class";
	rdfs:comment "Class is used to define a form";
	klff:addOnCss "form-control";
	klff:overrideCss "".

klff:FormProperty a rdf:Class;
	rdfs:subClassOf klff:FormProperty;
	klff:addOnCss "form-control" .

schema:Person a rdf:Class;
	a klff:objectClass ;
	klff:storageType "object";
	klff:primaryKey schema:email.
		
schema:givenName a klff:FormProperty;	
	rdfs:domain	schema:Person;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "First name or given name for an individual.";	
	klob:jsonObjName "givenname";
	klob:jsonValFormat "objectValue";
	klff:requiredByDomain true ;
	klff:fieldType "text";
	klff:fieldValidation "none";                   
	klff:formLabelName "Given (First) name"; 
	klff:formFieldOrder 2;
	klff:formLayoutRow 2;          
	klff:formFieldName "givenName" .
	
schema:familyName a klff:FormProperty;	
	rdfs:domain	schema:Person;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "Last name or family name for an individual.";	
	klob:jsonObjName "familyname";
	klob:jsonValFormat "objectValue";            
	klff:fieldType "text";
	klff:fieldValidation "none";                   
	klff:formLabelName "Family name";
	klff:formFieldOrder 3;  
	klff:formLayoutRow 2;         
	klff:formFieldName "familyName" .
	
schema:email a klff:FormProperty;	
	rdfs:domain	schema:Person;	
	rdfs:range	xsd:string;	
	rdfs:comment "email address.";	
	klob:jsonObjName "email";
	klob:jsonValFormat "objectValue";              
	klff:fieldType "email";
	klff:fieldValidation "email";                    
	klff:formLabelName "Email"; 
	klff:formFieldOrder 4; 
	klff:formLayoutRow 3;        
	klff:formFieldName "email" .

kls:userName a klff:FormProperty;	
	rdfs:domain	kls:UserClass;	
	rdfs:range	rdfs:literal;	
	rdfs:comment "Individual's username.";	
	klob:jsonObjName "username";
	klob:jsonValFormat "objectValue";
	klob:useFor obi:UserClass;               
	klff:fieldType "text";
	klff:fieldValidation "uniqueValue";   
        # foaf:Agent required by all servers to represent public access       
        acl:accessTo [
                        acl:mode acl:Read;
                        acl:agentClass foaf:Agent
                ];
        acl:accessToClass [
                        acl:mode acl:Append;
                        acl:agentClass kls:self;
                        acl:agentClass kls:Admin
        ];               
        acl:accessToClass [
                        acl:mode acl:Write;
                        acl:mode acl:Control;
                        acl:agentClass kls:Admin
        ];           
	klff:formLabelName "Username";
	klff:formFieldOrder 1; 
	klff:formLayoutRow 1;          
	klff:formFieldName "username" .

kls:salt a klff:FormProperty;	
	rdfs:domain	kls:PasswordClass;
	rdfs:domain obi:Assertion;	
	rdfs:range	xsd:string;	
	rdfs:comment "Salt used for hash.";	
	klob:jsonObjName "salt";
	klob:jsonValFormat "objectValue";
	klob:useFor obi:UserClass;               
	klff:fieldType "serverOnly";
	klff:fieldProccessing "salt";
	klff:fieldValidation "uniqueValue";         
	klff:fieldSecurity [
			kls:userGroup "self";
			kls:permissions "read, write"
		];
	klff:fieldSecurity [
			kls:userGroup "none";
			kls:permissions "none"
		];
	klff:fieldSecurity [
			kls:userGroup "admin";
			kls:permissions "read"
		];
	klff:formFieldName "salt".
	
kls:password a klff:FormProperty;	
	rdfs:domain	kls:PasswordClass;	
	rdfs:range	xsd:string;	
	rdfs:comment "User's account password.";	
	klob:jsonObjName "username";
	klob:jsonValFormat "objectValue";
	klob:useFor obi:UserClass;               
	klff:fieldType "password";
	klff:fieldValidation "passwordValidation"; 
	klff:fieldSaveType "secureHash";                  
	klff:formLabelName "Password";
	klff:formFieldOrder 1; 
	klff:formLayoutRow 1;          
	klff:formFieldName "password".

kls:hasPerson a klff:FormProperty;
	rdfs:domain kls:UserClass;
	rdfs:range schema:Person.
	
kls:hasPassword a klff:FormProperty;	
	rdfs:domain	kls:UserClass;	
	rdfs:range	kls:PasswordClass;	
	rdfs:comment "User's account password object.";	
	klob:jsonObjName "Password";
	klob:jsonValFormat "lookupProperties";
	klob:lookupReturnField [
		klob:jsonObjName "salt";
		klob:jsonValFormat "objectValue" ;
		klob:propertyField obi:salt
	] ;
	klob:lookupReturnField [
		klob:jsonObjName "type";
		klob:jsonValFormat "objectValue" ;
		klob:propertyField obi:password
	] ;
	klob:useFor obi:UserClass;               
	klff:fieldType "objectStore";
	klff:objectStore kls:PasswordClass;	                           
	klff:formFieldName "PasswordClass".
	
klff:forms a klff:FormProperty.

klff:fieldType a klff:FormProperty;
	rdfs:subPropertyOf klff:forms;
	rdfs:domain	klff:FormProperty;	
	rdfs:range	klff:FieldClass.
		
klff:fieldValidation a klff:FormProperty.

klff:fieldSecurity a klff:FormProperty.
	

kls:userGroup a klff:FormProperty;
	rdfs:subPropertyOf klff:fieldSecurity.

kls:permissions a klff:FormProperty;
	rdfs:subPropertyOf klff:fieldSecurity.

klff:formLabelName a klff:FormProperty.         
	
	
klff:formFieldName a klff:FormProperty.
	

klff:formLayoutRow a klff:FormProperty.
  
  
klff:fieldSaveType a klff:FormProperty.
  
  
klff:fieldProccessing a klff:FormProperty.
  

klff:fieldValidation a klff:FormProperty.
  

klff:useInForm a klff:FormProperty.
  
  
klr:UserGroup a rdf:Class;
	rdfs:label "User group";
	rdfs:comment "a group of users".
	
kls:SysAdmin a kls:UserGroup;
	rdfs:label "SysAdmin-SG";
	rdfs:comment "The application system admin security group";
	kls:basePermissions "full";
	kls:specifiedPermissions "override".

kls:Admin a kls:UserGroup;
	rdfs:label "Admin-SG";
	rdfs:comment "The application admin security group for managing content";
	kls:basePermissions "full";
	kls:specifiedPermissions "adhere".
	
kls:Self a kls:UserGroup;
	rdfs:label "Self-SG";
	rdfs:comment "The security group pertaining to logged in user level permissions";
	kls:basePermissions "read";
	kls:specifiedPermissions "adhere".

kls:Public a kls:UserGroup;
	rdfs:label "Public-SG";
	rdfs:comment "The security group for public access";
	kls:basePermissions "none";
	kls:specifiedPermissions "adhere".

obi:UserForm a klff:FormClass;
	rdfs:label "User form";
	rdfs:comment "Use this form for generating a new user. It will store results in a UserClass and Person RDF classes";
	klff:addOnCss "";
	klff:overrideCss "";
	klff:hasProperty [
		klff:propName schema:email;
		klff:formFieldOrder 1;
		klff:addOnCss "";
		klff:overrideCss "";
		klff:formInstance [
					klff:formInstanceType "new";
					klff:fromAction "hide" 
				]
		];
	klff:hasProperty [
		klff:propName schema:familyName;
		klff:formFieldOrder 4;
		klff:addOnCss "";
		klff:overrideCss "";
		klff:formInstance [
			klff:formInstanceType "new";
			klff:fromAction "hide"
			]
		];
	klff:hasProperty [
		klff:propName schema:givenName;
		klff:formFieldOrder 4;
		klff:addOnCss "";
		klff:overrideCss "";
		klff:formInstance [
			klff:formInstanceType "new";
			klff:fromAction "hide"
			]
		].
# sparlAllItemDataTemplate.rq
#
# Query will return triples multiple edges out from a base iri or from a list
# a list of IRIs
#
# kwargs:
#       ouput: ['rdf', 'json'] rdf will run a construct query
#       item_uri: uri for a single item
#       uri_list: list of Uri()s to retreive
#       special_union: additional query statments
#       filters: filter statement
#       prefix: the sparql prefix declarations

{{ prefix }}
{% if output == 'rdf'%}
CONSTRUCT {
    ?s ?p ?o
}
WHERE
{
{% endif %}
SELECT DISTINCT ?s ?p ?o
{
    {% if item_uri %}
    # Return a single item
    BIND({{ item_uri }} as ?item) .
    {% endif %}
    {% if uri_list %}
    # Get Items for multipe items
    VALUES ?item {
        {% for item in uri_list %}{{ item.sparql }}
        {% endfor %}
    }
    {% endif %}
    { # Gather all primary triples
        ?item ?p ?o.
        BIND(?item as ?s) .
    } UNION { # selet Triples where the URI is the Subject 1 level deep
        ?item ?p0 ?s.
        ?s ?p ?o .
        Filter(?p0 != rdf:type).
        Filter(isiri(?s)||isblank(?s))
    } UNION { # selet Triples where the URI is the Subject 2 levels deep
        ?item ?p0 ?s1.
        ?s1 ?p1 ?s .
        ?s ?p ?o .
        Filter(?p0 != rdf:type).
        Filter(?p1 != rdf:type).
        Filter(isiri(?s)||isblank(?s))
        Filter(isiri(?s1)||isblank(?s1))
    } UNION { # selet Triples where the URI is the Subject 3 levels deep
        ?item ?p0 ?s1.
        ?s1 ?p1 ?s2 .
        ?s2 ?p2 ?s .
        ?s ?p ?o .
        Filter(?p0 != rdf:type).
        Filter(?p1 != rdf:type).
        Filter(?p2 != rdf:type).
        Filter(isiri(?s)||isblank(?s))
        Filter(isiri(?s1)||isblank(?s1))
        Filter(isblank(?s2)||isiri(?s2))
    } UNION { # Select Triples where the URI is the Object
        ?s ?p ?item .
        BIND(?item as ?o) .
    } UNION { # Select Triples where the URI is the Object
        ?s ?p0 ?item .
        ?s ?p ?o .
        Filter(?p0 != rdf:type).
        Filter(isiri(?s)||isblank(?s))
        Filter(?p != ?p0)
    } UNION { # Select Triples where the URI is the Object one level deep
        ?s0 ?p0 ?item .
        ?s0 ?p1 ?s .
        ?s ?p ?o .
        Filter(isiri(?s)||isBlank(?s)) .
        Filter(?p0 != rdf:type).
        Filter(isiri(?s0)||isblank(?s0)) .
        Filter(?p1 != ?p0) .
    } UNION { # Select Triples where the URI is the Object two levels deep
        ?s0 ?p0 ?item .
        ?s0 ?p1 ?s1 .
        ?s1 ?p2 ?s .
        ?s ?p ?o .
        Filter(isiri(?s)||isBlank(?s)) .
        Filter(isiri(?s1)||isBlank(?s1)) .
        Filter(?p0 != rdf:type).
        Filter(isiri(?s0)||isblank(?s0)) .
        Filter(?p1 != ?p0) .
    } UNION { # Select Triples where the URI is the Object three level deep
        ?s0 ?p0 ?item .
        ?s0 ?p1 ?s1 .
        ?s1 ?p2 ?o2 .
        ?s ?p   ?s1 .
        bind(?s1 as ?o)
        Filter(isiri(?s)||isBlank(?s)) .
        Filter(?p0 != rdf:type).
        Filter(?p2 != rdf:type).
        Filter(?p1 != rdf:type).
        Filter(?p!= bf:heldBy).
        Filter(?p!= bf:partOf).
        Filter(?p!= bf:subject).
        Filter(isiri(?s0)||isblank(?s0)) .
        Filter(?p1 != ?p0) .
    } UNION { # Select Triples where the URI is the Object four levels deep
        ?s0 ?p0 ?item .
        ?s0 ?p1 ?s1 .
        ?s1 ?p2 ?o2 .
        ?s ?p3 ?s1 .
        ?s ?p ?o.
        Filter(isiri(?s)||isBlank(?s)) .
        Filter(?p0 != rdf:type).
        Filter(?p2 != rdf:type).
        Filter(?p1 != rdf:type).
        Filter(?p3!= bf:heldBy).
        Filter(?p3!= bf:partOf).
        Filter(?p3!= bf:subject).
        Filter(isiri(?s0)||isblank(?s0)) .
        Filter(?p1 != ?p0) .
    }  UNION { # Select Triples where the URI is the Object one level deep
        ?s0 ?p0 ?item .
        ?s0 ?p1 ?s1 .
        ?s1 ?p2 ?o2 .
        ?s2 ?p3 ?s1 .
        ?s2 ?p4 ?s .
        ?s ?p ?o .
        Filter(isiri(?s)||isBlank(?s)) .
        Filter(?p0 != rdf:type).
        Filter(?p2 != rdf:type).
        Filter(?p1 != rdf:type).
        Filter(?p3!= bf:heldBy).
        Filter(?p3!= bf:partOf).
        Filter(?p3!= bf:subject).
        Filter(isiri(?s0)||isblank(?s0)) .
        Filter(?p1 != ?p0) .
        Filter(isblank(?s)) .
    }
    {{ special_union }}
    {{ filters }}
}
{% if output == 'rdf'%}
}
{% endif %}

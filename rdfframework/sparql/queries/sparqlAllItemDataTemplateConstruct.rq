{{ prefix }}
CONSTRUCT
{
    ?s ?p ?o
}
WHERE
{
SELECT DISTINCT ?s ?p ?o
{
  BIND({{ item_uri }} as ?item) .
  { # Gather all primary triples
      ?item ?p ?o.
      BIND(?item as ?s) .
  } UNION { # selet Triples where the URI is the Subject 1 level deep
      ?item ?p0 ?s.
      ?s ?p ?o .
      Filter(?p0 != rdf:type).
      Filter(isiri(?s)||isblank(?s))
  } UNION { # selet Triples where the URI is the Subject 2 levels deep
      ?item ?p0 ?s1.
      ?s1 ?p1 ?s .
      ?s ?p ?o .
      Filter(?p0 != rdf:type).
      Filter(?p1 != rdf:type).
      Filter(isiri(?s)||isblank(?s))
      Filter(isiri(?s1)||isblank(?s1))
  } UNION { # selet Triples where the URI is the Subject 3 levels deep
      ?item ?p0 ?s1.
      ?s1 ?p1 ?s2 .
      ?s2 ?p2 ?s .
      ?s ?p ?o .
      Filter(?p0 != rdf:type).
      Filter(?p1 != rdf:type).
      Filter(?p2 != rdf:type).
      Filter(isiri(?s)||isblank(?s))
      Filter(isiri(?s1)||isblank(?s1))
      Filter(isblank(?s2)||isiri(?s2))
  } UNION { # Select Triples where the URI is the Object
      ?s ?p ?item .
      BIND(?item as ?o) .
  } UNION { # Select Triples where the URI is the Object
      ?s ?p0 ?item .
      ?s ?p ?o .
      Filter(?p0 != rdf:type).
      Filter(isiri(?s)||isblank(?s))
      Filter(?p != ?p0)
  } UNION { # Select Triples where the URI is the Object one level deep
      ?s0 ?p0 ?item .
      ?s0 ?p1 ?s .
      ?s ?p ?o .
      Filter(isiri(?s)||isBlank(?s)) .
      Filter(?p0 != rdf:type).
      Filter(isiri(?s0)||isblank(?s0)) .
      Filter(?p1 != ?p0) .
  } UNION { # Select Triples where the URI is the Object two levels deep
      ?s0 ?p0 ?item .
      ?s0 ?p1 ?s1 .
      ?s1 ?p2 ?s .
      ?s ?p ?o .
      Filter(isiri(?s)||isBlank(?s)) .
      Filter(isiri(?s1)||isBlank(?s1)) .
      Filter(?p0 != rdf:type).
      Filter(isiri(?s0)||isblank(?s0)) .
      Filter(?p1 != ?p0) .
  } UNION { # Select Triples where the URI is the Object one level deep
      ?s0 ?p0 ?item .
      ?s0 ?p1 ?s1 .
      ?s1 ?p2 ?o2 .
      ?s ?p   ?s1 .
      bind(?s1 as ?o)
      Filter(isiri(?s)||isBlank(?s)) .
      Filter(?p0 != rdf:type).
      Filter(?p2 != rdf:type).
      Filter(?p1 != rdf:type).
      Filter(?p!= bf:heldBy).
      Filter(isiri(?s0)||isblank(?s0)) .
      Filter(?p1 != ?p0) .
  } UNION { # Select Triples where the URI is the Object one level deep
      ?s0 ?p0 ?item .
      ?s0 ?p1 ?s1 .
      ?s1 ?p2 ?o2 .
      ?s ?p3 ?s1 .
      ?s ?p ?o.
      Filter(isiri(?s)||isBlank(?s)) .
      Filter(?p0 != rdf:type).
      Filter(?p2 != rdf:type).
      Filter(?p1 != rdf:type).
      Filter(?p3!= bf:heldBy).
      Filter(isiri(?s0)||isblank(?s0)) .
      Filter(?p1 != ?p0) .
  }  UNION { # Select Triples where the URI is the Object one level deep
      ?s0 ?p0 ?item .
      ?s0 ?p1 ?s1 .
      ?s1 ?p2 ?o2 .
      ?s2 ?p3 ?s1 .
      ?s2 ?p4 ?s .
      ?s ?p ?o .
      Filter(isiri(?s)||isBlank(?s)) .
      Filter(?p0 != rdf:type).
      Filter(?p2 != rdf:type).
      Filter(?p1 != rdf:type).
      Filter(?p3!= bf:heldBy).
      Filter(isiri(?s0)||isblank(?s0)) .
      Filter(?p1 != ?p0) .
      Filter(isblank(?s)) .
  }
    # hide all of the repository generated data
  # BIND(IF(isblank(?o),"",STR(?o)) as ?o_)
  # BIND(IF(isblank(?p),"",STR(?p)) as ?p_)
  # FILTER(!(
  #   STRSTARTS(?p_, "http://fedora.info/definitions/v4/")||
  #   STRSTARTS(?o_, "http://fedora.info/definitions/v4/")||
  #   STRSTARTS(?o_, "http://www.w3.org/ns/ldp#Container")||
  #   STRSTARTS(?o_, "http://www.jcp.org/jcr/")||
  #   STRSTARTS(?p_, "http://www.w3.org/ns/ldp#Container")||
  #   STRSTARTS(?p_, "http://www.w3.org/ns/ldp#RDFSource")||
  #   STRSTARTS(?o_, "http://www.w3.org/ns/ldp#RDFSource")||
  #   STRSTARTS(?o_, "http://www.jcp.org/jcr/")
  # ))
}
}

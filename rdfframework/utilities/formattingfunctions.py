from .baseutilities import make_list
from .uriconvertor import RdfNsManager

NSM = RdfNsManager()

def string_wrap(string, width=80, indent=0, subindent='auto'):
    rtn_list = []
    line_list = []
    string = " ".join(string.replace("\n","").split())
    words = string.split(" ")
    line_len = indent
    if indent > 0:
        line_list.append(" "*(indent-1))
    # determine the subindent number
    if subindent == 'auto':
        subindent = len(words[0]) + 1
    else:
        try:
            int(subindent)
        except ValueError:
            subindent = 1
    # generate the lines
    for word in words:
        # see if adding the next word makes the line longer than the width
        if line_len + len(word) < width and len(word) < width:
            line_list.append(word)
            line_len += len(word) + 1
        # if the word by itsself is greater than the width add it anyway
        elif len(word) >= width:
            rtn_list.append(word)
        # start a new line
        else:
            rtn_list.append(" ".join(line_list))
            line_list = []
            if indent > 0:
                line_list.append(" "*(indent + subindent - 1))
            line_list.append(word)
            line_len = indent + len(word) + 1 + subindent
    rtn_list.append(" ".join(line_list))
    return "\n".join(rtn_list)

def find_values(field_list, data):
    return [(key, data.get(key)) for key in field_list if data.get(key)]

def format_doc_vals(data,
                    descriptor,
                    seperator=": ",
                    divider=" | ",
                    subdivider=", ",
                    max_width=70,
                    indent=4,
                    subindent='auto',
                    key_join = False):
    line_data = []
    if descriptor:
        line_data.append("%s%s%s" %(" "*indent, descriptor, seperator))
    try:
        if key_join:
            rtn_val = "%s%s\n" % (descriptor, seperator)
        else:
            rtn_val = "%s%s%s" % (descriptor, seperator, data.pop(0)[1])
        if len(data) > 0 :
            if key_join:
                rtn_val = "%s%s%s" % (rtn_val, divider,
                        subdivider.join([string_wrap("%s: %s" % item, max_width,indent,subindent) for item in data]))
            else:
                rtn_val = "%s%s%s" % (rtn_val, divider,
                        subdivider.join([item[1] for item in data]))
                rtn_val = string_wrap(rtn_val, max_width, indent)
    except IndexError:
        rtn_val =""
    return rtn_val

def make_doc_string(name, cls_def, bases=[], props={}):
    footer_text = """*** autogenerated from knowledgelinks.io rdfframework 
                        rdf definitions"""
    doc_items = [name]
    label_fields = ['skos_prefLabel',
                    'schema_name',
                    'skos_altLabel',
                    'schema_alternateName',
                    'foaf_labelproperty',
                    'rdfs_label',
                    'hiddenlabel']
    description_fields = ['skos_definition',
                          'schema_description',
                          'rdfs_comment']
    note_fields = ['skos_note',
                   'schema_disambiguatingDescription']
    prop_fields = ['rdfs_comment']
    label = format_doc_vals(data=find_values(label_fields, cls_def),
                            descriptor="Label",
                            divider=" | ",
                            subdivider=", ")
    if len(label) > 0:
        doc_items.append(label)
    description = format_doc_vals(data=find_values(description_fields, cls_def),
                                  descriptor="Description",
                                  divider="",
                                  subdivider="\n")
    if len(description) > 0:
        doc_items.append(description)
    parents = [("", NSM.ttluri(base.__name__)) for base in bases[:-1]]
    if len(parents) > 0:
        cls_hierarchy = format_doc_vals(data=parents,
                             descriptor="Class Hierarchy",
                             divider=" -> ",
                             subdivider=" -> ")
        doc_items.append(cls_hierarchy)

    for base in bases[:-1]:
        if "Properties:" in base.__doc__:
            doc_items.append(\
                    base.__doc__[ \
                    base.__doc__.find(\
                    "Properties"):].replace(\
                    "Properties:", "Inherited from %s:" % base.__name__).replace(footer_text,""))

    prop_notes = [(prop, " ".join(make_list(prop_def.get('rdfs_comment')))) \
                  for prop, prop_def in props.items() \
                  if prop_def.get('rdfs_comment')]
    prop_notes.sort()
    properties = format_doc_vals(data=prop_notes,
                                  descriptor="Properties",
                                  divider="",
                                  subdivider="\n",
                                  subindent=14,
                                  key_join=True)
    
    doc_items.append(properties)
    

    

    footer = format_doc_vals(data=[("",footer_text)],
                             descriptor="",
                             seperator="\n",
                             divider="\n",
                             subdivider="")
    doc_items.append(footer)
    return "\n\n".join(doc_items)

